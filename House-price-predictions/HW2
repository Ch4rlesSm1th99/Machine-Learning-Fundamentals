{
  "metadata": {
    "kernelspec": {
      "language": "python",
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.7.12",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ch4rlesSm1th99/House-price-predictions/blob/main/HW2_%3E_log_reg_%26_NN.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Q1. Predicting housing prices\n",
        "\n",
        "In this problem, you will generate models for predicting house prices from given house features. The file “house_prices.txt” contains the data.\n",
        "\n",
        "There are four features used in this regression:\n",
        "\n",
        "* one binary feature (whether or not the house has covered parking)\n",
        "* one numerical feature (size, measure in thousands of square meters)\n",
        "* two categorical features (architectural style and location)\n",
        "\n",
        "Each of the categorial features is represented as a vector of size 3. This gives us feature vectors of size 8 in total for each house. 200 examples are given in the training set."
      ],
      "metadata": {
        "id": "LpkyHj1X9aBL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pathlib\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd"
      ],
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "execution": {
          "iopub.status.busy": "2023-03-08T14:52:25.152161Z",
          "iopub.execute_input": "2023-03-08T14:52:25.152644Z",
          "iopub.status.idle": "2023-03-08T14:52:25.158879Z",
          "shell.execute_reply.started": "2023-03-08T14:52:25.152600Z",
          "shell.execute_reply": "2023-03-08T14:52:25.157308Z"
        },
        "trusted": true,
        "id": "bieYZZvY9aBO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%bash\n",
        "\n",
        "gdown 1hLxbWVrnmSnZDGjvu8HeQex6ezbXeLB6"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FOV1zQntRzX-",
        "outputId": "c65f3b69-fbaf-4dbf-faec-f1b0a0f29522"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1hLxbWVrnmSnZDGjvu8HeQex6ezbXeLB6\n",
            "To: /content/house_prices.txt\n",
            "\r  0%|          | 0.00/6.08k [00:00<?, ?B/s]\r100%|██████████| 6.08k/6.08k [00:00<00:00, 7.39MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DATA_DIR = pathlib.Path(\"/content\")"
      ],
      "metadata": {
        "id": "Z6wzKRjO-dDQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features = pd.read_csv(\n",
        "    DATA_DIR / \"house_prices.txt\",\n",
        "    delimiter = \"\\t\",\n",
        "    skiprows=[0, 1, 2, 3, 4],\n",
        "    header=None,\n",
        "    usecols=[0, 1, 2, 3, 4, 6, 7, 8],\n",
        "    names=[\"parking\", \"sq_meters\", \"art_deco\", \"bungalow\", \"colonial\", \"west\", \"east\", \"north\"],\n",
        "    dtype=np.float32\n",
        ")\n",
        "\n",
        "target = pd.read_csv(\n",
        "    DATA_DIR / \"house_prices.txt\",\n",
        "    delimiter = \"\\t\",\n",
        "    skiprows=[0, 1, 2, 3, 4],\n",
        "    header=None,\n",
        "    usecols=[5],\n",
        "    names=[\"price\"],\n",
        "    dtype=np.float32\n",
        ")\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-08T15:00:42.159689Z",
          "iopub.execute_input": "2023-03-08T15:00:42.160580Z",
          "iopub.status.idle": "2023-03-08T15:00:42.180812Z",
          "shell.execute_reply.started": "2023-03-08T15:00:42.160519Z",
          "shell.execute_reply": "2023-03-08T15:00:42.179717Z"
        },
        "trusted": true,
        "id": "n8MAlhME9aBQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features.head()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-08T15:00:42.515427Z",
          "iopub.execute_input": "2023-03-08T15:00:42.516763Z",
          "iopub.status.idle": "2023-03-08T15:00:42.536126Z",
          "shell.execute_reply.started": "2023-03-08T15:00:42.516708Z",
          "shell.execute_reply": "2023-03-08T15:00:42.534714Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ZKPMBVmz9aBR",
        "outputId": "eab4c3cf-1b01-4e4b-ae3d-a9417f1cc1c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   parking  sq_meters  art_deco  bungalow  colonial  west  east  north\n",
              "0     -1.0     0.1275       0.0       1.0       0.0   0.0   0.0    1.0\n",
              "1      1.0     0.1100       1.0       0.0       0.0   1.0   0.0    0.0\n",
              "2     -1.0     0.1375       0.0       0.0       1.0   0.0   1.0    0.0\n",
              "3      1.0     0.1975       0.0       1.0       0.0   0.0   0.0    1.0\n",
              "4     -1.0     0.1200       0.0       0.0       1.0   1.0   0.0    0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e18bef5c-321e-49ce-b17f-5d59feb125f2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>parking</th>\n",
              "      <th>sq_meters</th>\n",
              "      <th>art_deco</th>\n",
              "      <th>bungalow</th>\n",
              "      <th>colonial</th>\n",
              "      <th>west</th>\n",
              "      <th>east</th>\n",
              "      <th>north</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.1275</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.1100</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.1375</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.1975</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.1200</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e18bef5c-321e-49ce-b17f-5d59feb125f2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e18bef5c-321e-49ce-b17f-5d59feb125f2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e18bef5c-321e-49ce-b17f-5d59feb125f2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9a9aa28a-24f6-4025-9a64-9284e7ed55a1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9a9aa28a-24f6-4025-9a64-9284e7ed55a1')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9a9aa28a-24f6-4025-9a64-9284e7ed55a1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "target"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "W3LXKK38k_zM",
        "outputId": "769e6aa0-c83c-424e-a6b9-95b145794a0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     price\n",
              "0    0.300\n",
              "1    0.335\n",
              "2    0.286\n",
              "3    0.512\n",
              "4    0.295\n",
              "..     ...\n",
              "195  0.727\n",
              "196  0.407\n",
              "197  0.523\n",
              "198  0.313\n",
              "199  0.626\n",
              "\n",
              "[200 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ab7dc572-113a-47f0-8cfb-04b883afd0fa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.335</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.512</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.295</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>0.727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>0.407</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>0.523</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198</th>\n",
              "      <td>0.313</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>199</th>\n",
              "      <td>0.626</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>200 rows × 1 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ab7dc572-113a-47f0-8cfb-04b883afd0fa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ab7dc572-113a-47f0-8cfb-04b883afd0fa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ab7dc572-113a-47f0-8cfb-04b883afd0fa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-86a4e3c3-8d30-438b-8937-f669b12f5515\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-86a4e3c3-8d30-438b-8937-f669b12f5515')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-86a4e3c3-8d30-438b-8937-f669b12f5515 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## a) Split the dataset into training and testing sets\n",
        "\n",
        "Split the dataset into training and testing sets. Keep 80% of the data for training and 20% of the data for testing."
      ],
      "metadata": {
        "id": "dVncPwnc9aBS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "#split the data\n",
        "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n",
        "\n",
        "#converts df to array\n",
        "X_train_array = X_train.values\n",
        "X_test_array = X_test.values\n",
        "y_train_array = y_train.values\n",
        "y_test_array = y_test.values"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-08T15:00:45.851737Z",
          "iopub.execute_input": "2023-03-08T15:00:45.852434Z",
          "iopub.status.idle": "2023-03-08T15:00:45.863825Z",
          "shell.execute_reply.started": "2023-03-08T15:00:45.852382Z",
          "shell.execute_reply": "2023-03-08T15:00:45.862256Z"
        },
        "trusted": true,
        "id": "20JaHLbQ9aBT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## b) Build a neural network to predict house prices\n",
        "\n",
        "Use the provided dataloaders, define a neural network with two hidden layers of 10 units each both with ReLU activation. The output unit should have no activation function."
      ],
      "metadata": {
        "id": "yc7Z2CET9aBV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from torch import nn, optim, utils"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-08T15:00:51.764563Z",
          "iopub.execute_input": "2023-03-08T15:00:51.765007Z",
          "iopub.status.idle": "2023-03-08T15:00:51.771765Z",
          "shell.execute_reply.started": "2023-03-08T15:00:51.764969Z",
          "shell.execute_reply": "2023-03-08T15:00:51.770128Z"
        },
        "trusted": true,
        "id": "1fBbsOaB9aBV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from torch import nn, optim, utils\n",
        "\n",
        "#convert training data to tensors\n",
        "train_features_tensor = torch.from_numpy(X_train_array)\n",
        "train_target_tensor = torch.from_numpy(y_train_array)\n",
        "\n",
        "train_dataset = utils.data.TensorDataset(train_features_tensor, train_target_tensor)\n",
        "\n",
        "#convert test data to tensors\n",
        "test_features_tensor = torch.from_numpy(X_test_array)\n",
        "test_target_tensor = torch.from_numpy(y_test_array)\n",
        "\n",
        "test_dataset = utils.data.TensorDataset(test_features_tensor, test_target_tensor)\n",
        "\n",
        "train_dataloader = utils.data.DataLoader(train_dataset, batch_size=40, shuffle=True)\n",
        "test_dataloader = utils.data.DataLoader(test_dataset, batch_size=40, shuffle=False)"
      ],
      "metadata": {
        "id": "mUWJaoJ-NG2G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#NN layers and activation functions\n",
        "class predict_house_price(nn.Module):\n",
        "  def __init__(self,ni):\n",
        "    super().__init__()\n",
        "    self.layer1 = nn.Linear(ni, 10)\n",
        "    self.layer2 = nn.Linear(10, 10)\n",
        "    self.layer3 = nn.Linear(10, 1)\n",
        "\n",
        "  def forward(self,x):\n",
        "    x = self.layer1(x)\n",
        "    x = torch.relu(x)\n",
        "\n",
        "    x = self.layer2(x)\n",
        "    x = torch.relu(x)\n",
        "\n",
        "    x = self.layer3(x)\n",
        "    return x\n"
      ],
      "metadata": {
        "id": "5nxP-lzdPmWl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## c) Train your neural network using gradient descent\n",
        "\n",
        "Using mean square loss, train the network with an appropriate optimizer for a few hundred epochs and plot the loss versus the number of training epochs."
      ],
      "metadata": {
        "id": "wRKC6VPw9aBW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#initialise netwrok and define optimiser and loss function\n",
        "net = predict_house_price(8)\n",
        "opt = optim.SGD(net.parameters(), lr=0.1, momentum=0.5)\n",
        "criterion = nn.MSELoss()\n",
        "\n",
        "num_epochs = 300\n",
        "losses = []\n",
        "\n",
        "#training loop\n",
        "for i in range(num_epochs):\n",
        "    total_loss = 0\n",
        "    for batch in train_dataloader:\n",
        "        X, y = batch[0], batch[1]\n",
        "\n",
        "        outputs = net(X)\n",
        "\n",
        "        loss = criterion(outputs, y)\n",
        "\n",
        "        opt.zero_grad()\n",
        "        loss.backward()\n",
        "        opt.step()\n",
        "\n",
        "        total_loss += loss.item()\n",
        "\n",
        "    losses.append(total_loss / len(train_dataloader))\n",
        "\n",
        "#plot the training loss\n",
        "import matplotlib.pyplot as plt\n",
        "plt.plot(losses)\n",
        "plt.xlabel('Epoch number')\n",
        "plt.ylabel('mean squared error loss')\n",
        "plt.show()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-08T15:00:54.452745Z",
          "iopub.execute_input": "2023-03-08T15:00:54.453446Z",
          "iopub.status.idle": "2023-03-08T15:00:54.459399Z",
          "shell.execute_reply.started": "2023-03-08T15:00:54.453406Z",
          "shell.execute_reply": "2023-03-08T15:00:54.457668Z"
        },
        "trusted": true,
        "id": "rbsEpRls9aBW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "outputId": "977d4873-2d69-4640-a5f1-58e1456f89ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## d) Assess the performance of your neural network\n",
        "\n",
        "Assess the performance of your neural network on the training data and the testing data. Comment on the results."
      ],
      "metadata": {
        "id": "BOZPKa8h9aBX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def compute_loss(net, dataloader, criterion):\n",
        "  net.eval()  #set the model to evaluation mode\n",
        "  total_loss = 0.0\n",
        "  with torch.no_grad():   #gradients are not updated as we test\n",
        "    for batch in dataloader:\n",
        "        inputs, targets = batch[0], batch[1]\n",
        "        outputs = net(inputs)\n",
        "        loss = criterion(outputs, targets)\n",
        "        total_loss += loss.item()\n",
        "  return total_loss / len(dataloader)\n",
        "\n",
        "#computing the loss on the training and test datasets\n",
        "train_loss = compute_loss(net, train_dataloader, criterion)\n",
        "test_loss = compute_loss(net, test_dataloader, criterion)\n",
        "\n",
        "print(f\"Training loss: {train_loss}\")\n",
        "print(f\"Testing loss: {test_loss}\")\n",
        "\n",
        "if train_loss < test_loss and test_loss / train_loss > 1:\n",
        "  print(\"model is overfitting\")\n",
        "else:\n",
        "  print(\"model is underfitting\")\n",
        "\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-08T15:00:56.346747Z",
          "iopub.execute_input": "2023-03-08T15:00:56.347226Z",
          "iopub.status.idle": "2023-03-08T15:00:56.356599Z",
          "shell.execute_reply.started": "2023-03-08T15:00:56.347181Z",
          "shell.execute_reply": "2023-03-08T15:00:56.354646Z"
        },
        "trusted": true,
        "id": "VUqGwlQX9aBY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d36000b3-2bc1-466e-b964-eb9efcbd7d47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training loss: 0.0023408430570270866\n",
            "Testing loss: 0.0058356160297989845\n",
            "model is overfitting\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Q2. Classification\n",
        "\n",
        "Consider the following simulated classification dataset with N = 300 samples labeled with one of three class labels."
      ],
      "metadata": {
        "id": "ywMbqKP2AORQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%bash\n",
        "\n",
        "gdown 1_n5odu1KSpBAqO_Ddbqy2Ty0mG12Dr0A\n",
        "gdown 1C7GK_uY0srlUdLfHfGa4IZcfthmmdROr"
      ],
      "metadata": {
        "id": "2RCsg-mtR20C",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ff593388-ce50-4f34-8c6d-d8d8eb3e5446"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1_n5odu1KSpBAqO_Ddbqy2Ty0mG12Dr0A\n",
            "To: /content/spiral_features.npy\n",
            "\r  0%|          | 0.00/4.93k [00:00<?, ?B/s]\r100%|██████████| 4.93k/4.93k [00:00<00:00, 17.2MB/s]\n",
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1C7GK_uY0srlUdLfHfGa4IZcfthmmdROr\n",
            "To: /content/spiral_target.npy\n",
            "\r  0%|          | 0.00/428 [00:00<?, ?B/s]\r100%|██████████| 428/428 [00:00<00:00, 1.64MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = (np.load(DATA_DIR / \"spiral_features.npy\")\n",
        "              .astype(np.float32))\n",
        "target = np.load(DATA_DIR / \"spiral_target.npy\")\n",
        "\n",
        "# visualize the data\n",
        "plt.scatter(features[:, 0], features[:, 1], c=target, s=20)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "6g1OV8ho9aBZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "outputId": "a2dd458d-905f-47bf-d10e-9725439247dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "target.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gf7-9pvD_hu7",
        "outputId": "b8a7c005-1c8e-490e-8709-82769a51f925"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(300,)"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## a) Split the dataset into training and testing sets\n",
        "\n",
        "Split the dataset into training and testing sets. Keep 80% of the data for training and 20% of the data for testing."
      ],
      "metadata": {
        "id": "Ef_iVNRoAZp4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#split the data\n",
        "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "TE4YSz1CAWCQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## b) Train a logistic regression model\n",
        "\n",
        "Using the provided datasets and dataloaders, build a 3-class logistic regression classifier for this dataset using PyTorch and train it for 2000 epochs using gradient descent."
      ],
      "metadata": {
        "id": "vpZJHaKtAcw6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#convert training data to tensors\n",
        "train_features_tensor = torch.from_numpy(X_train)\n",
        "train_target_tensor = torch.from_numpy(y_train)\n",
        "\n",
        "train_dataset = utils.data.TensorDataset(train_features_tensor, train_target_tensor)\n",
        "\n",
        "#convert test data to tensors\n",
        "test_features_tensor = torch.from_numpy(X_test)\n",
        "test_target_tensor = torch.from_numpy(y_test)\n",
        "\n",
        "test_dataset = utils.data.TensorDataset(test_features_tensor, test_target_tensor)\n",
        "\n",
        "train_dataloader = utils.data.DataLoader(train_dataset, batch_size=40, shuffle=True)\n",
        "test_dataloader = utils.data.DataLoader(test_dataset, batch_size=40, shuffle=False)"
      ],
      "metadata": {
        "id": "jr7zrbEfAbKq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class LogisticRegression(nn.Module):\n",
        "    def __init__(self, ni, no):\n",
        "        super(LogisticRegression, self).__init__()\n",
        "        self.linear = nn.Linear(ni, no)\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.linear(x)"
      ],
      "metadata": {
        "id": "pGurrQy6A04S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#initialise model\n",
        "model = LogisticRegression(X_train.shape[1], 3) #features of input data and output classes"
      ],
      "metadata": {
        "id": "0Ur68NtK9mot"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#define optimiser and loss function\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.SGD(model.parameters(), lr=0.01)"
      ],
      "metadata": {
        "id": "pVZf1Xy49q07"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "losses = []\n",
        "\n",
        "#training loop\n",
        "num_epochs = 2000\n",
        "\n",
        "for epoch in range(num_epochs):\n",
        "    epoch_loss = 0\n",
        "    for batch_features, batch_targets in train_dataloader:\n",
        "\n",
        "        outputs = model(batch_features)\n",
        "        loss = criterion(outputs, batch_targets)\n",
        "        epoch_loss += loss.item()\n",
        "\n",
        "\n",
        "        optimizer.zero_grad()\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "    average_epoch_loss = epoch_loss / len(train_dataloader)\n",
        "    losses.append(average_epoch_loss)"
      ],
      "metadata": {
        "id": "kYUeVMptEOkb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(losses)\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "4N55hQdqHGvr",
        "outputId": "7705c1d6-78ed-43be-fbb5-809e9828b838"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## c) Assess the performance of your logistic regression model\n",
        "\n",
        "Assess the performance of your model on the training data and the testing data in terms of both loss and accuracy. Comment on the results."
      ],
      "metadata": {
        "id": "rKeAu9DxBtIQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_accuracy(model, dataloader):\n",
        "    model.eval()\n",
        "    correct_predictions = 0\n",
        "    total_predictions = 0\n",
        "    with torch.no_grad():\n",
        "        for features, targets in dataloader:\n",
        "            outputs = model(features)\n",
        "            _, predicted = torch.max(outputs.data, 1)\n",
        "            correct = (predicted == targets).float()\n",
        "            correct_predictions += correct.sum().item()\n",
        "            total_predictions += targets.size(0)\n",
        "    return correct_predictions / total_predictions * 100"
      ],
      "metadata": {
        "id": "Sq1-TlZpIgei"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_loss = compute_loss(model, train_dataloader, criterion)\n",
        "test_loss = compute_loss(model, test_dataloader, criterion)\n",
        "\n",
        "train_accuracy = get_accuracy(model, train_dataloader)\n",
        "test_accuracy = get_accuracy(model, test_dataloader)\n",
        "\n",
        "print(f\"training loss : {train_loss}\")\n",
        "print(f\"testing loss : {test_loss}\")\n",
        "print(f\"training accuracy : {train_accuracy}%\")\n",
        "print(f\"testing accuracy : {test_accuracy}%\")\n",
        "\n",
        "if train_loss < test_loss and test_loss / train_loss > 1:\n",
        "  print(\"model is overfitting\")\n",
        "elif train_loss > test_loss:\n",
        "  print(\"model is underfitting\")\n",
        "else:\n",
        "  print(\"model is neither overfitting nor underfitting\")\n",
        "\n",
        "if test_accuracy > 95:\n",
        "  print(\"model makes accurate predictions\")\n",
        "else:\n",
        "  print(\"model is bad\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "87636J8EI8NS",
        "outputId": "29fc3f7e-fbff-4fc3-db56-db4a8a32eee5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "training loss : 0.7528287967046102\n",
            "testing loss : 0.7478610873222351\n",
            "training accuracy : 54.166666666666664%\n",
            "testing accuracy : 50.0%\n",
            "model is underfitting\n",
            "model is bad\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## d) Build a neural network classifier\n",
        "\n",
        "Build a 3-class classifier using a neural network with one hidden layer of 100 units and a ReLU activation. Train the network with a gradient descent algorithm and for 2000 iterations."
      ],
      "metadata": {
        "id": "xVE3pwIoB6lk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#NN layers and activation functions\n",
        "class spiral(nn.Module):\n",
        "  def __init__(self,ni,hd,no):\n",
        "    super().__init__()\n",
        "    self.layerin = nn.Linear(ni, hd)\n",
        "    self.layerout = nn.Linear(hd, no)\n",
        "\n",
        "  def forward(self,x):\n",
        "    x = self.layerin(x)\n",
        "    x = torch.relu(x)\n",
        "\n",
        "    x = self.layerout(x)\n",
        "    return x\n",
        "\n",
        "input_dim = X_train.shape[1]\n",
        "hidden_dim = 100\n",
        "output_dim = 3\n",
        "\n",
        "model = spiral(input_dim, hidden_dim, output_dim)"
      ],
      "metadata": {
        "id": "yN0IhgvlB3Ox"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.SGD(model.parameters(), lr=0.1)\n",
        "num_epochs = 2000"
      ],
      "metadata": {
        "id": "Xs0q5BJ2MjlZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "epoch_losses = []\n",
        "\n",
        "for epoch in range(num_epochs):\n",
        "    epoch_loss = 0\n",
        "    for batch_features, batch_targets in train_dataloader:\n",
        "\n",
        "        outputs = model(batch_features)\n",
        "        loss = criterion(outputs, batch_targets)\n",
        "        epoch_loss += loss.item()\n",
        "\n",
        "\n",
        "        optimizer.zero_grad()\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "    avg_epoch_loss = epoch_loss / len(train_dataloader)\n",
        "    epoch_losses.append(avg_epoch_loss)"
      ],
      "metadata": {
        "id": "4VBbzFCaZyyP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(epoch_losses)\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "44u6_A_DaShP",
        "outputId": "42a729ee-1b1b-4e1c-d354-14bf63f238dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## e) Assess the performance of your neural network\n",
        "\n",
        "Assess the performance of your neural network on the training data and the testing data in terms of both loss and accuracy. Comment on the results."
      ],
      "metadata": {
        "id": "Xrqkw0XgCNDY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_loss = compute_loss(model, train_dataloader, criterion)\n",
        "test_loss = compute_loss(model, test_dataloader, criterion)\n",
        "\n",
        "train_accuracy = get_accuracy(model, train_dataloader)\n",
        "test_accuracy = get_accuracy(model, test_dataloader)\n",
        "\n",
        "print(f\"Training Loss: {train_loss}\")\n",
        "print(f\"Testing Loss: {test_loss}\")\n",
        "print(f\"Training Accuracy: {train_accuracy}%\")\n",
        "print(f\"Testing Accuracy: {test_accuracy}%\")\n",
        "\n",
        "if train_loss < test_loss and test_loss / train_loss > 1:\n",
        "  print(\"model is overfitting\")\n",
        "elif train_loss > test_loss:\n",
        "  print(\"model is underfitting\")\n",
        "else:\n",
        "  print(\"model is neither overfitting nor underfitting\")\n",
        "\n",
        "if test_accuracy > 95:\n",
        "  print(\"model makes accurate predictions\")\n",
        "else:\n",
        "  print(\"model is bad\")\n"
      ],
      "metadata": {
        "id": "q5z5M2-aCKZd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "81693352-f0e4-46a2-eba0-6d1f380f6ee7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training Loss: 0.05560959316790104\n",
            "Testing Loss: 0.04425472719594836\n",
            "Training Accuracy: 99.16666666666667%\n",
            "Testing Accuracy: 98.33333333333333%\n",
            "model is underfitting\n",
            "model makes accurate predictions\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## f) Interpret the confusion matrix\n",
        "\n",
        "Compute the confusion matrix for your classifier on both the training and testing data and interpret the results. You may either code your own confusion matrix or use the following function from Scikit-Learn."
      ],
      "metadata": {
        "id": "q2bSpQJiCa8v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_predictions_and_labels(model, dataloader):\n",
        "    model.eval()\n",
        "    all_predictions = torch.tensor([], dtype=torch.long)\n",
        "    all_labels = torch.tensor([], dtype=torch.long)\n",
        "    with torch.no_grad():\n",
        "        for features, labels in dataloader:\n",
        "            outputs = model(features)\n",
        "            _, predicted = torch.max(outputs, 1)\n",
        "            all_predictions = torch.cat((all_predictions, predicted))\n",
        "            all_labels = torch.cat((all_labels, labels))\n",
        "    return all_predictions, all_labels"
      ],
      "metadata": {
        "id": "x1oqHYaGdJcP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "train_predictions, train_labels = get_predictions_and_labels(model, train_dataloader)\n",
        "test_predictions, test_labels = get_predictions_and_labels(model, test_dataloader)\n",
        "\n",
        "train_confusion = confusion_matrix(train_labels.numpy(), train_predictions.numpy())\n",
        "test_confusion = confusion_matrix(test_labels.numpy(), test_predictions.numpy())\n",
        "\n",
        "print(train_confusion)\n",
        "print(test_confusion)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nwr-IRUWdecN",
        "outputId": "c7d202f3-31f9-4d73-dc3d-0f0c3cd95bb8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[84  0  1]\n",
            " [ 0 73  1]\n",
            " [ 0  0 81]]\n",
            "[[15  0  0]\n",
            " [ 0 26  0]\n",
            " [ 1  0 18]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "ZhD6gDIzhaQY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "classes = [\"0\" , \"1\", \"2\"]"
      ],
      "metadata": {
        "id": "XHwFDEqwiZ5t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(train_confusion, xticklabels=classes , yticklabels=classes)\n",
        "plt.ylabel('true label')\n",
        "plt.xlabel('predicted label')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "m8xWz76ah3IN",
        "outputId": "7bbf0a0b-01a2-41a5-8c99-0973717152b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(test_confusion, xticklabels=classes , yticklabels=classes)\n",
        "plt.ylabel('true label')\n",
        "plt.xlabel('predicted label')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "foOg-j7qjKpe",
        "outputId": "92010e40-845c-4fd8-b34e-c1f240c8bd98"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
